Group g467-006
Braden Watling
Nikita Tsytsarkin

Breakdown of work:
  Braden
    - implemented AST building
    - implemented visitor pattern, printing and free
    - implemented semantic analysis for unary expressions, assignment,
      functions and constructors
    - did bonus for line + column number
  Nikita
    - implemented semantic analysis for analysis for binary expressions.
    - wrote tests for semantic analysis for binary expressions.
    - implemented pre-defined variables
    - implemented check for redeclaration of a variable

Summary:
The first step we took to complete this lab was to build the AST. To do this,
we designed the node structure to allow the type of node to describe its elements.
This was implemented with nested structs and unions. Then in the grammar, we
built the AST from the bottom up.

After building the AST, we had to be able to print it and free it. Since we would
need to be able to traverse the AST for many different purposes, we built a
general purpose visitor for the AST that allowed us to specify a function to call
in pre-order and post-order. This allowed us to specify what we wanted to
print at each node, or how to free each node.

This visitor pattern was also useful when we implemented semantic analysis - we
used it to specify the rules that apply to each of the different node types.

Our approach to the symbol table was to use a vector of maps to represent the symbol
table of each scope. Whenever we entered a new scope we would push a new map on the
top of the vector and also push the scope ID onto a stack of scope IDs. The top of
this stack represented the current scope ID. When we left the scope we would pop the
scope ID from the stack. In each of these symbol tables, we would insert a dummy entry
with TYPE_UNKNOWN whenever we referenced a variable, and then later populate that
entry with the correct type when we parse the declaration. As described in the
assignment document, this allowed us to process as many errors as possible.

The bonuses we implemented in this lab are:
  - Report the line number that an error occurred on
  - Report the column number that the error occurred on

To implement the line and column numbers, we recorded the line and column number
of each node as we built the AST. This way, when we found a semantic error, we
could just use this information from the erroneous node.
