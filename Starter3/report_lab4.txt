Group g467-006
Braden Watling
Nikita Tsytsarkin

Breakdown of work:
  Braden
    - Implemented +, -, *, /, ^, <, <=, >, >=, ||, &&
    - Implemented if statements
    - Implemented constructors
    - Implemented function calls
  Nikita
    - implemented unary operators
    - implemented == and != logical operators
    - added a fix for variable initialization during declaration
    - tests for binary and unary operators

Summary:
In order to implement non-trivial math operations, we determined how we could
perform those operations using a combination of the available instructions.
For multiplication, addition, subtraction, and exponentiation there was a 1:1
mapping. For division, we first had to calculate the reciprocal of the second
operand and then multiply the result with the first operand.

The way we dealt with booleans was interesting: we assigned a value of
{ 0, 0, 0, 0 } to false, and { -1, -1, -1, -1 } to true. The rationale behind
this choice was that the CMP instruction allows us to choose one of two values
for each component, based on whether the component of the condition is < 0.
By choosing { -1, -1, -1, -1 } to be true, we can implement an if statement on
an assignment with:
  CMP out, condition, val, out
and an else statement with:
  CMP out, condition, out, val
This made it much simpler to deal with if statements.

An important observation about an if statement in miniGLSL is that the only
statement made within an if or else statement that can have an effect on
anything outside of that if/else statement is an assignment statement. Thus,
we just replaced those assignment statements with the CMP instruction, which
allows us to do a conditional move.

To deal with constants, we created a new PARAM for every value we needed to
assign. We did the same with registers - whenever we had an intermediate
value that needed to be assigned to a register, we created that register. To
deal with scalars, we copied the scalars value into all 4 components of the
register in order to make instructions like MUL work properly for v * s or 
s * v.

For each node code was generated based on type of expression. Most of the 
arithmetic binary and unary operators were fairly easy, since they had 
direct mapping to assembly instructions. Logical operatiors were trickier, 
they required multiple instructions to be implemented and at times an extra 
temporary register to store intermediate results. Declaration nodes required 
allocating a new register and if they included an assignment, we also had to 
allocate a constant register to store the value and initialize variable to 
that value. Function calls had 1:1 mapping to ARB instructions. Most of the 
instructions required resolving the right register where certain variable 
or result of a previous operation is stored.

Finally, we wrote tests to ensure that the resulting assembly code was
what we expected. They can be found in the ./test/ directory. To run them,
execute tester.sh in that directory. The *.in files in each directory
represent the input for each test, and the *.out files represent the expected
output of each test.

